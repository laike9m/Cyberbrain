syntax = "proto2";

// Interface exported by the server.
service Communication {

  // Sync state between client and server.
  rpc SyncState(State) returns (stream State) {}

  rpc FindFrames(CursorPosition) returns (FrameLocaterList) {}

  rpc GetFrame(FrameLocater) returns (Frame) {}
}

message State {
  enum Status {
    CLIENT_READY = 1;
    SERVER_READY = 2;
    EXECUTION_COMPLETE = 3;
    BACKTRACING_COMPLETE = 4;
  }
  optional Status status = 1;

  // Arbitrary optional message.
  optional string message = 2;
}

// Current cursor position in VSC editor.
// See https://code.visualstudio.com/api/references/vscode-api#Position
message CursorPosition {
  optional string filename = 1;
  optional int32 lineno = 2;
  optional int32 character = 3;
}

// Information to help locate a frame.
message FrameLocater {
  // This field is required.
  optional string frame_id = 1;

  // Ideally be qualified name, at least use callable's name.
  optional string frame_name = 2;

  // Filename where the frame is located at.
  optional string filename = 3;

  // Start line of the frame in filename.
  optional int64 start_lineno = 4;

  // End line of the frame in filename.
  optional int64 end_lineno = 5;

  // The file from which the frame is entered.
  optional string callsite_filename = 6;

  // The line where the callable that generates the frame is called.
  optional int64 callsite_lineno = 7;

  // Arguments stringified. f(1, b=2) -> "1, b=2"
  optional string arguments = 8;
}

message FrameLocaterList {
  repeated FrameLocater frame_locaters = 1;
}

// These four message types correspond to the types defined in cyberbrain/basis.py
message InitialValue {
  optional string uid = 1;
  optional string filename = 2;
  optional int32 lineno = 3;
  // Target identifier.
  optional string target = 4;
  // A JSON string representing a Python object.
  optional string value = 5;
}

message Binding {
  optional string uid = 1;
  optional string filename = 2;
  optional int32 lineno = 3;
  optional string target = 4;
  optional string value = 5;
  repeated string sources = 6;
}

message Mutation {
  optional string uid = 1;
  optional string filename = 2;
  optional int32 lineno = 3;
  optional string target = 4;
  optional string value = 5;
  // A JSON string representing the mutation. Generated by deepdiff.
  optional string delta = 6;
  // A list of identifiers that caused the mutation.
  repeated string sources = 7;
}

message Deletion {
  optional string uid = 1;
  optional string filename = 2;
  optional int32 lineno = 3;
  optional string target = 4;
}

message Event {
  oneof value {
    InitialValue initial_value = 1;
    Binding binding = 2;
    Mutation mutation = 3;
    Deletion deletion = 4;
  }
}

message EventList {
  repeated Event events = 1;
}

message EventUidList {
  repeated string event_uids = 1;
}

message Frame {
  optional string filename = 1;

  // Events that happened in this frame.
  map</* identifier */ string, EventList> events = 2;

  // Maps events to relevant predecessor events.
  map</* event uid */ string, EventUidList> tracing_result = 3;
}
